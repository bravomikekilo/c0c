// source file used to test error detection

// a void function
void void_ret(int x, int y) {
    printf("sum is:", x + y)  // lost a semicolon
}

// a int return function
int sum(int x, int y) {
    return (x + y);
}

int charSum(char x, char y) {
    int t;
    char r;
    t = 2 * x + y;
    t = 2 * t;
    r = sum(t, x + y);
    return (t);
}

// a char return function
char getChar() {
    char ch;
    scanf(ch);
    return (ch);
}

int main() {
    const int t = 1;
    int i_arr[1];
    char c_arr[10];
    int x;

    y = sum('a', x);
    t = 12;

    x = x + void_ret(x, x);  // test void
    x = void_ret(x, x) + x;  // test void
    x = x + y;  // test undeclared
    c_arr[5] = y; // test undeclared
    1 = 2;              // invalid left value

    printf("inside", c_arr[0]);
    printf("inside", c_arr);
    printf("inside", c_arr[4]);
    printf("inside", c_arr[9]);

    // index out of bound
    printf("out one", c_arr[10]);
    printf("out one", c_arr[11]);
    printf("out one", c_arr[5 * 2]);
    printf("out one", c_arr[11 - 5 * 2 + 12 / 2 * 3]);
    printf("out one", c_arr[-1]);
    printf("out one", c_arr[10 - 11]);
    printf("out one", c_arr[4 - 3 * 3]);

    printf(i_arr[0]);
    printf(i_arr[1]);
    printf(i_arr[t - 2]);

    x = charSum('a' * 2, 'b');

    //div const zero test
    x = 1 / (6 * 2 - 3 * 4);
}










